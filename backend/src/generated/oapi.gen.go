// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Book defines model for book.
type Book struct {
	BookId int64    `json:"bookId"`
	TagIds *[]int64 `json:"tagIds,omitempty"`
	Title  string   `json:"title"`
	UserId int64    `json:"userId"`
}

// Books defines model for books.
type Books = []Book

// Error defines model for error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// BookId defines model for bookId.
type BookId = int

// UserId defines model for userId.
type UserId = int

// DefaultResponse defines model for default_response.
type DefaultResponse = Error

// GetBooksParams defines parameters for GetBooks.
type GetBooksParams struct {
	Title *string `form:"title,omitempty" json:"title,omitempty"`
}

// GetUserIdHoarderParams defines parameters for GetUserIdHoarder.
type GetUserIdHoarderParams struct {
	Status *string `form:"status,omitempty" json:"status,omitempty"`
	Tags   *[]int  `form:"tags,omitempty" json:"tags,omitempty"`
}

// PatchUserIdBooksBookIdJSONRequestBody defines body for PatchUserIdBooksBookId for application/json ContentType.
type PatchUserIdBooksBookIdJSONRequestBody = Book

// PostUserIdHoarderJSONRequestBody defines body for PostUserIdHoarder for application/json ContentType.
type PostUserIdHoarderJSONRequestBody = Book

// PatchUserIdHoarderBookIdJSONRequestBody defines body for PatchUserIdHoarderBookId for application/json ContentType.
type PatchUserIdHoarderBookIdJSONRequestBody = Book

// PostUserIdHoarderBookIdJSONRequestBody defines body for PostUserIdHoarderBookId for application/json ContentType.
type PostUserIdHoarderBookIdJSONRequestBody = Book

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 登録されている本を取得する
	// (GET /books)
	GetBooks(c *gin.Context, params GetBooksParams)
	// 特定の本1冊の情報を取得する
	// (GET /books/{bookId})
	GetBooksBookId(c *gin.Context, bookId BookId)
	// ユーザーが登録した本を削除する
	// (DELETE /{userId}/books/{bookId})
	DeleteUserIdBooksBookId(c *gin.Context, userId UserId, bookId BookId)
	// ユーザーが登録した本の情報を更新する
	// (PATCH /{userId}/books/{bookId})
	PatchUserIdBooksBookId(c *gin.Context, userId UserId, bookId BookId)
	// ユーザーの積読リストから、本の一覧を取得する。
	// (GET /{userId}/hoarder)
	GetUserIdHoarder(c *gin.Context, userId UserId, params GetUserIdHoarderParams)
	// 本を新しく登録する。そのままユーザーの積読リストにも登録する。
	// (POST /{userId}/hoarder)
	PostUserIdHoarder(c *gin.Context, userId UserId)
	// ユーザーの積読リストにある本を削除する
	// (DELETE /{userId}/hoarder/{bookId})
	DeleteUserIdHoarderBookId(c *gin.Context, userId UserId, bookId BookId)
	// ユーザーの積読リストにある本の状態を更新する
	// (PATCH /{userId}/hoarder/{bookId})
	PatchUserIdHoarderBookId(c *gin.Context, userId UserId, bookId BookId)
	// ユーザーの積読リストに本を登録する
	// (POST /{userId}/hoarder/{bookId})
	PostUserIdHoarderBookId(c *gin.Context, userId UserId, bookId BookId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBooks operation middleware
func (siw *ServerInterfaceWrapper) GetBooks(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBooksParams

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", c.Request.URL.Query(), &params.Title)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter title: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBooks(c, params)
}

// GetBooksBookId operation middleware
func (siw *ServerInterfaceWrapper) GetBooksBookId(c *gin.Context) {

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId BookId

	err = runtime.BindStyledParameterWithOptions("simple", "bookId", c.Param("bookId"), &bookId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bookId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBooksBookId(c, bookId)
}

// DeleteUserIdBooksBookId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserIdBooksBookId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "bookId" -------------
	var bookId BookId

	err = runtime.BindStyledParameterWithOptions("simple", "bookId", c.Param("bookId"), &bookId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bookId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUserIdBooksBookId(c, userId, bookId)
}

// PatchUserIdBooksBookId operation middleware
func (siw *ServerInterfaceWrapper) PatchUserIdBooksBookId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "bookId" -------------
	var bookId BookId

	err = runtime.BindStyledParameterWithOptions("simple", "bookId", c.Param("bookId"), &bookId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bookId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchUserIdBooksBookId(c, userId, bookId)
}

// GetUserIdHoarder operation middleware
func (siw *ServerInterfaceWrapper) GetUserIdHoarder(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserIdHoarderParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserIdHoarder(c, userId, params)
}

// PostUserIdHoarder operation middleware
func (siw *ServerInterfaceWrapper) PostUserIdHoarder(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserIdHoarder(c, userId)
}

// DeleteUserIdHoarderBookId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserIdHoarderBookId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "bookId" -------------
	var bookId BookId

	err = runtime.BindStyledParameterWithOptions("simple", "bookId", c.Param("bookId"), &bookId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bookId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUserIdHoarderBookId(c, userId, bookId)
}

// PatchUserIdHoarderBookId operation middleware
func (siw *ServerInterfaceWrapper) PatchUserIdHoarderBookId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "bookId" -------------
	var bookId BookId

	err = runtime.BindStyledParameterWithOptions("simple", "bookId", c.Param("bookId"), &bookId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bookId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchUserIdHoarderBookId(c, userId, bookId)
}

// PostUserIdHoarderBookId operation middleware
func (siw *ServerInterfaceWrapper) PostUserIdHoarderBookId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "bookId" -------------
	var bookId BookId

	err = runtime.BindStyledParameterWithOptions("simple", "bookId", c.Param("bookId"), &bookId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bookId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserIdHoarderBookId(c, userId, bookId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/books", wrapper.GetBooks)
	router.GET(options.BaseURL+"/books/:bookId", wrapper.GetBooksBookId)
	router.DELETE(options.BaseURL+"/:userId/books/:bookId", wrapper.DeleteUserIdBooksBookId)
	router.PATCH(options.BaseURL+"/:userId/books/:bookId", wrapper.PatchUserIdBooksBookId)
	router.GET(options.BaseURL+"/:userId/hoarder", wrapper.GetUserIdHoarder)
	router.POST(options.BaseURL+"/:userId/hoarder", wrapper.PostUserIdHoarder)
	router.DELETE(options.BaseURL+"/:userId/hoarder/:bookId", wrapper.DeleteUserIdHoarderBookId)
	router.PATCH(options.BaseURL+"/:userId/hoarder/:bookId", wrapper.PatchUserIdHoarderBookId)
	router.POST(options.BaseURL+"/:userId/hoarder/:bookId", wrapper.PostUserIdHoarderBookId)
}
