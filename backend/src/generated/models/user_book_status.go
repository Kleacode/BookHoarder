// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserBookStatus is an object representing the database table.
type UserBookStatus struct {
	ID       int `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID   int `db:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	BookID   int `db:"book_id" boil:"book_id" json:"book_id" toml:"book_id" yaml:"book_id"`
	StatusID int `db:"status_id" boil:"status_id" json:"status_id" toml:"status_id" yaml:"status_id"`

	R *userBookStatusR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L userBookStatusL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserBookStatusColumns = struct {
	ID       string
	UserID   string
	BookID   string
	StatusID string
}{
	ID:       "id",
	UserID:   "user_id",
	BookID:   "book_id",
	StatusID: "status_id",
}

var UserBookStatusTableColumns = struct {
	ID       string
	UserID   string
	BookID   string
	StatusID string
}{
	ID:       "user_book_status.id",
	UserID:   "user_book_status.user_id",
	BookID:   "user_book_status.book_id",
	StatusID: "user_book_status.status_id",
}

// Generated where

var UserBookStatusWhere = struct {
	ID       whereHelperint
	UserID   whereHelperint
	BookID   whereHelperint
	StatusID whereHelperint
}{
	ID:       whereHelperint{field: "\"user_book_status\".\"id\""},
	UserID:   whereHelperint{field: "\"user_book_status\".\"user_id\""},
	BookID:   whereHelperint{field: "\"user_book_status\".\"book_id\""},
	StatusID: whereHelperint{field: "\"user_book_status\".\"status_id\""},
}

// UserBookStatusRels is where relationship names are stored.
var UserBookStatusRels = struct {
	Book   string
	Status string
	User   string
}{
	Book:   "Book",
	Status: "Status",
	User:   "User",
}

// userBookStatusR is where relationships are stored.
type userBookStatusR struct {
	Book   *Book   `db:"Book" boil:"Book" json:"Book" toml:"Book" yaml:"Book"`
	Status *Status `db:"Status" boil:"Status" json:"Status" toml:"Status" yaml:"Status"`
	User   *User   `db:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userBookStatusR) NewStruct() *userBookStatusR {
	return &userBookStatusR{}
}

func (r *userBookStatusR) GetBook() *Book {
	if r == nil {
		return nil
	}
	return r.Book
}

func (r *userBookStatusR) GetStatus() *Status {
	if r == nil {
		return nil
	}
	return r.Status
}

func (r *userBookStatusR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userBookStatusL is where Load methods for each relationship are stored.
type userBookStatusL struct{}

var (
	userBookStatusAllColumns            = []string{"id", "user_id", "book_id", "status_id"}
	userBookStatusColumnsWithoutDefault = []string{"user_id", "book_id", "status_id"}
	userBookStatusColumnsWithDefault    = []string{"id"}
	userBookStatusPrimaryKeyColumns     = []string{"id"}
	userBookStatusGeneratedColumns      = []string{}
)

type (
	// UserBookStatusSlice is an alias for a slice of pointers to UserBookStatus.
	// This should almost always be used instead of []UserBookStatus.
	UserBookStatusSlice []*UserBookStatus
	// UserBookStatusHook is the signature for custom UserBookStatus hook methods
	UserBookStatusHook func(context.Context, boil.ContextExecutor, *UserBookStatus) error

	userBookStatusQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userBookStatusType                 = reflect.TypeOf(&UserBookStatus{})
	userBookStatusMapping              = queries.MakeStructMapping(userBookStatusType)
	userBookStatusPrimaryKeyMapping, _ = queries.BindMapping(userBookStatusType, userBookStatusMapping, userBookStatusPrimaryKeyColumns)
	userBookStatusInsertCacheMut       sync.RWMutex
	userBookStatusInsertCache          = make(map[string]insertCache)
	userBookStatusUpdateCacheMut       sync.RWMutex
	userBookStatusUpdateCache          = make(map[string]updateCache)
	userBookStatusUpsertCacheMut       sync.RWMutex
	userBookStatusUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userBookStatusAfterSelectMu sync.Mutex
var userBookStatusAfterSelectHooks []UserBookStatusHook

var userBookStatusBeforeInsertMu sync.Mutex
var userBookStatusBeforeInsertHooks []UserBookStatusHook
var userBookStatusAfterInsertMu sync.Mutex
var userBookStatusAfterInsertHooks []UserBookStatusHook

var userBookStatusBeforeUpdateMu sync.Mutex
var userBookStatusBeforeUpdateHooks []UserBookStatusHook
var userBookStatusAfterUpdateMu sync.Mutex
var userBookStatusAfterUpdateHooks []UserBookStatusHook

var userBookStatusBeforeDeleteMu sync.Mutex
var userBookStatusBeforeDeleteHooks []UserBookStatusHook
var userBookStatusAfterDeleteMu sync.Mutex
var userBookStatusAfterDeleteHooks []UserBookStatusHook

var userBookStatusBeforeUpsertMu sync.Mutex
var userBookStatusBeforeUpsertHooks []UserBookStatusHook
var userBookStatusAfterUpsertMu sync.Mutex
var userBookStatusAfterUpsertHooks []UserBookStatusHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserBookStatus) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookStatusAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserBookStatus) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookStatusBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserBookStatus) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookStatusAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserBookStatus) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookStatusBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserBookStatus) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookStatusAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserBookStatus) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookStatusBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserBookStatus) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookStatusAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserBookStatus) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookStatusBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserBookStatus) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookStatusAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserBookStatusHook registers your hook function for all future operations.
func AddUserBookStatusHook(hookPoint boil.HookPoint, userBookStatusHook UserBookStatusHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userBookStatusAfterSelectMu.Lock()
		userBookStatusAfterSelectHooks = append(userBookStatusAfterSelectHooks, userBookStatusHook)
		userBookStatusAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userBookStatusBeforeInsertMu.Lock()
		userBookStatusBeforeInsertHooks = append(userBookStatusBeforeInsertHooks, userBookStatusHook)
		userBookStatusBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userBookStatusAfterInsertMu.Lock()
		userBookStatusAfterInsertHooks = append(userBookStatusAfterInsertHooks, userBookStatusHook)
		userBookStatusAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userBookStatusBeforeUpdateMu.Lock()
		userBookStatusBeforeUpdateHooks = append(userBookStatusBeforeUpdateHooks, userBookStatusHook)
		userBookStatusBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userBookStatusAfterUpdateMu.Lock()
		userBookStatusAfterUpdateHooks = append(userBookStatusAfterUpdateHooks, userBookStatusHook)
		userBookStatusAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userBookStatusBeforeDeleteMu.Lock()
		userBookStatusBeforeDeleteHooks = append(userBookStatusBeforeDeleteHooks, userBookStatusHook)
		userBookStatusBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userBookStatusAfterDeleteMu.Lock()
		userBookStatusAfterDeleteHooks = append(userBookStatusAfterDeleteHooks, userBookStatusHook)
		userBookStatusAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userBookStatusBeforeUpsertMu.Lock()
		userBookStatusBeforeUpsertHooks = append(userBookStatusBeforeUpsertHooks, userBookStatusHook)
		userBookStatusBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userBookStatusAfterUpsertMu.Lock()
		userBookStatusAfterUpsertHooks = append(userBookStatusAfterUpsertHooks, userBookStatusHook)
		userBookStatusAfterUpsertMu.Unlock()
	}
}

// One returns a single userBookStatus record from the query.
func (q userBookStatusQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserBookStatus, error) {
	o := &UserBookStatus{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_book_status")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserBookStatus records from the query.
func (q userBookStatusQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserBookStatusSlice, error) {
	var o []*UserBookStatus

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserBookStatus slice")
	}

	if len(userBookStatusAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserBookStatus records in the query.
func (q userBookStatusQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_book_status rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userBookStatusQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_book_status exists")
	}

	return count > 0, nil
}

// Book pointed to by the foreign key.
func (o *UserBookStatus) Book(mods ...qm.QueryMod) bookQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BookID),
	}

	queryMods = append(queryMods, mods...)

	return Books(queryMods...)
}

// Status pointed to by the foreign key.
func (o *UserBookStatus) Status(mods ...qm.QueryMod) statusQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StatusID),
	}

	queryMods = append(queryMods, mods...)

	return Statuses(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserBookStatus) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadBook allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBookStatusL) LoadBook(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBookStatus interface{}, mods queries.Applicator) error {
	var slice []*UserBookStatus
	var object *UserBookStatus

	if singular {
		var ok bool
		object, ok = maybeUserBookStatus.(*UserBookStatus)
		if !ok {
			object = new(UserBookStatus)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBookStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBookStatus))
			}
		}
	} else {
		s, ok := maybeUserBookStatus.(*[]*UserBookStatus)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBookStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBookStatus))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBookStatusR{}
		}
		args[object.BookID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBookStatusR{}
			}

			args[obj.BookID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`books`),
		qm.WhereIn(`books.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for books")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for books")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Book = foreign
		if foreign.R == nil {
			foreign.R = &bookR{}
		}
		foreign.R.UserBookStatuses = append(foreign.R.UserBookStatuses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BookID == foreign.ID {
				local.R.Book = foreign
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.UserBookStatuses = append(foreign.R.UserBookStatuses, local)
				break
			}
		}
	}

	return nil
}

// LoadStatus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBookStatusL) LoadStatus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBookStatus interface{}, mods queries.Applicator) error {
	var slice []*UserBookStatus
	var object *UserBookStatus

	if singular {
		var ok bool
		object, ok = maybeUserBookStatus.(*UserBookStatus)
		if !ok {
			object = new(UserBookStatus)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBookStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBookStatus))
			}
		}
	} else {
		s, ok := maybeUserBookStatus.(*[]*UserBookStatus)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBookStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBookStatus))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBookStatusR{}
		}
		args[object.StatusID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBookStatusR{}
			}

			args[obj.StatusID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`status`),
		qm.WhereIn(`status.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Status")
	}

	var resultSlice []*Status
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Status")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for status")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for status")
	}

	if len(statusAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Status = foreign
		if foreign.R == nil {
			foreign.R = &statusR{}
		}
		foreign.R.UserBookStatuses = append(foreign.R.UserBookStatuses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StatusID == foreign.ID {
				local.R.Status = foreign
				if foreign.R == nil {
					foreign.R = &statusR{}
				}
				foreign.R.UserBookStatuses = append(foreign.R.UserBookStatuses, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBookStatusL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBookStatus interface{}, mods queries.Applicator) error {
	var slice []*UserBookStatus
	var object *UserBookStatus

	if singular {
		var ok bool
		object, ok = maybeUserBookStatus.(*UserBookStatus)
		if !ok {
			object = new(UserBookStatus)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBookStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBookStatus))
			}
		}
	} else {
		s, ok := maybeUserBookStatus.(*[]*UserBookStatus)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBookStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBookStatus))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBookStatusR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBookStatusR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserBookStatuses = append(foreign.R.UserBookStatuses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserBookStatuses = append(foreign.R.UserBookStatuses, local)
				break
			}
		}
	}

	return nil
}

// SetBook of the userBookStatus to the related item.
// Sets o.R.Book to related.
// Adds o to related.R.UserBookStatuses.
func (o *UserBookStatus) SetBook(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Book) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_book_status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"book_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBookStatusPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BookID = related.ID
	if o.R == nil {
		o.R = &userBookStatusR{
			Book: related,
		}
	} else {
		o.R.Book = related
	}

	if related.R == nil {
		related.R = &bookR{
			UserBookStatuses: UserBookStatusSlice{o},
		}
	} else {
		related.R.UserBookStatuses = append(related.R.UserBookStatuses, o)
	}

	return nil
}

// SetStatus of the userBookStatus to the related item.
// Sets o.R.Status to related.
// Adds o to related.R.UserBookStatuses.
func (o *UserBookStatus) SetStatus(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Status) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_book_status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"status_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBookStatusPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StatusID = related.ID
	if o.R == nil {
		o.R = &userBookStatusR{
			Status: related,
		}
	} else {
		o.R.Status = related
	}

	if related.R == nil {
		related.R = &statusR{
			UserBookStatuses: UserBookStatusSlice{o},
		}
	} else {
		related.R.UserBookStatuses = append(related.R.UserBookStatuses, o)
	}

	return nil
}

// SetUser of the userBookStatus to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBookStatuses.
func (o *UserBookStatus) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_book_status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBookStatusPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userBookStatusR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserBookStatuses: UserBookStatusSlice{o},
		}
	} else {
		related.R.UserBookStatuses = append(related.R.UserBookStatuses, o)
	}

	return nil
}

// UserBookStatuses retrieves all the records using an executor.
func UserBookStatuses(mods ...qm.QueryMod) userBookStatusQuery {
	mods = append(mods, qm.From("\"user_book_status\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_book_status\".*"})
	}

	return userBookStatusQuery{q}
}

// FindUserBookStatus retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserBookStatus(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserBookStatus, error) {
	userBookStatusObj := &UserBookStatus{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_book_status\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userBookStatusObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_book_status")
	}

	if err = userBookStatusObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userBookStatusObj, err
	}

	return userBookStatusObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserBookStatus) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_book_status provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userBookStatusColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userBookStatusInsertCacheMut.RLock()
	cache, cached := userBookStatusInsertCache[key]
	userBookStatusInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userBookStatusAllColumns,
			userBookStatusColumnsWithDefault,
			userBookStatusColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userBookStatusType, userBookStatusMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userBookStatusType, userBookStatusMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_book_status\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_book_status\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_book_status")
	}

	if !cached {
		userBookStatusInsertCacheMut.Lock()
		userBookStatusInsertCache[key] = cache
		userBookStatusInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserBookStatus.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserBookStatus) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userBookStatusUpdateCacheMut.RLock()
	cache, cached := userBookStatusUpdateCache[key]
	userBookStatusUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userBookStatusAllColumns,
			userBookStatusPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_book_status, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_book_status\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userBookStatusPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userBookStatusType, userBookStatusMapping, append(wl, userBookStatusPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_book_status row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_book_status")
	}

	if !cached {
		userBookStatusUpdateCacheMut.Lock()
		userBookStatusUpdateCache[key] = cache
		userBookStatusUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userBookStatusQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_book_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_book_status")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserBookStatusSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBookStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_book_status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userBookStatusPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userBookStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userBookStatus")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserBookStatus) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no user_book_status provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userBookStatusColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userBookStatusUpsertCacheMut.RLock()
	cache, cached := userBookStatusUpsertCache[key]
	userBookStatusUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userBookStatusAllColumns,
			userBookStatusColumnsWithDefault,
			userBookStatusColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userBookStatusAllColumns,
			userBookStatusPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_book_status, could not build update column list")
		}

		ret := strmangle.SetComplement(userBookStatusAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userBookStatusPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert user_book_status, could not build conflict column list")
			}

			conflict = make([]string, len(userBookStatusPrimaryKeyColumns))
			copy(conflict, userBookStatusPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_book_status\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userBookStatusType, userBookStatusMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userBookStatusType, userBookStatusMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_book_status")
	}

	if !cached {
		userBookStatusUpsertCacheMut.Lock()
		userBookStatusUpsertCache[key] = cache
		userBookStatusUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserBookStatus record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserBookStatus) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserBookStatus provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userBookStatusPrimaryKeyMapping)
	sql := "DELETE FROM \"user_book_status\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_book_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_book_status")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userBookStatusQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userBookStatusQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_book_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_book_status")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserBookStatusSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userBookStatusBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBookStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_book_status\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userBookStatusPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userBookStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_book_status")
	}

	if len(userBookStatusAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserBookStatus) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserBookStatus(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserBookStatusSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserBookStatusSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBookStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_book_status\".* FROM \"user_book_status\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userBookStatusPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserBookStatusSlice")
	}

	*o = slice

	return nil
}

// UserBookStatusExists checks if the UserBookStatus row exists.
func UserBookStatusExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_book_status\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_book_status exists")
	}

	return exists, nil
}

// Exists checks if the UserBookStatus row exists.
func (o *UserBookStatus) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserBookStatusExists(ctx, exec, o.ID)
}
