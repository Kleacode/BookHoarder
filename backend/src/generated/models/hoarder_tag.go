// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// HoarderTag is an object representing the database table.
type HoarderTag struct {
	ID        int       `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	HoarderID int       `db:"hoarder_id" boil:"hoarder_id" json:"hoarder_id" toml:"hoarder_id" yaml:"hoarder_id"`
	TagID     int       `db:"tag_id" boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`
	CreatedAt time.Time `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `db:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *hoarderTagR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L hoarderTagL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HoarderTagColumns = struct {
	ID        string
	HoarderID string
	TagID     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	HoarderID: "hoarder_id",
	TagID:     "tag_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var HoarderTagTableColumns = struct {
	ID        string
	HoarderID string
	TagID     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "hoarder_tag.id",
	HoarderID: "hoarder_tag.hoarder_id",
	TagID:     "hoarder_tag.tag_id",
	CreatedAt: "hoarder_tag.created_at",
	UpdatedAt: "hoarder_tag.updated_at",
}

// Generated where

var HoarderTagWhere = struct {
	ID        whereHelperint
	HoarderID whereHelperint
	TagID     whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "\"hoarder_tag\".\"id\""},
	HoarderID: whereHelperint{field: "\"hoarder_tag\".\"hoarder_id\""},
	TagID:     whereHelperint{field: "\"hoarder_tag\".\"tag_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"hoarder_tag\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"hoarder_tag\".\"updated_at\""},
}

// HoarderTagRels is where relationship names are stored.
var HoarderTagRels = struct {
	Hoarder string
	Tag     string
}{
	Hoarder: "Hoarder",
	Tag:     "Tag",
}

// hoarderTagR is where relationships are stored.
type hoarderTagR struct {
	Hoarder *UserBookStatus `db:"Hoarder" boil:"Hoarder" json:"Hoarder" toml:"Hoarder" yaml:"Hoarder"`
	Tag     *Tag            `db:"Tag" boil:"Tag" json:"Tag" toml:"Tag" yaml:"Tag"`
}

// NewStruct creates a new relationship struct
func (*hoarderTagR) NewStruct() *hoarderTagR {
	return &hoarderTagR{}
}

func (r *hoarderTagR) GetHoarder() *UserBookStatus {
	if r == nil {
		return nil
	}
	return r.Hoarder
}

func (r *hoarderTagR) GetTag() *Tag {
	if r == nil {
		return nil
	}
	return r.Tag
}

// hoarderTagL is where Load methods for each relationship are stored.
type hoarderTagL struct{}

var (
	hoarderTagAllColumns            = []string{"id", "hoarder_id", "tag_id", "created_at", "updated_at"}
	hoarderTagColumnsWithoutDefault = []string{"hoarder_id", "tag_id"}
	hoarderTagColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	hoarderTagPrimaryKeyColumns     = []string{"id"}
	hoarderTagGeneratedColumns      = []string{}
)

type (
	// HoarderTagSlice is an alias for a slice of pointers to HoarderTag.
	// This should almost always be used instead of []HoarderTag.
	HoarderTagSlice []*HoarderTag
	// HoarderTagHook is the signature for custom HoarderTag hook methods
	HoarderTagHook func(context.Context, boil.ContextExecutor, *HoarderTag) error

	hoarderTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	hoarderTagType                 = reflect.TypeOf(&HoarderTag{})
	hoarderTagMapping              = queries.MakeStructMapping(hoarderTagType)
	hoarderTagPrimaryKeyMapping, _ = queries.BindMapping(hoarderTagType, hoarderTagMapping, hoarderTagPrimaryKeyColumns)
	hoarderTagInsertCacheMut       sync.RWMutex
	hoarderTagInsertCache          = make(map[string]insertCache)
	hoarderTagUpdateCacheMut       sync.RWMutex
	hoarderTagUpdateCache          = make(map[string]updateCache)
	hoarderTagUpsertCacheMut       sync.RWMutex
	hoarderTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var hoarderTagAfterSelectMu sync.Mutex
var hoarderTagAfterSelectHooks []HoarderTagHook

var hoarderTagBeforeInsertMu sync.Mutex
var hoarderTagBeforeInsertHooks []HoarderTagHook
var hoarderTagAfterInsertMu sync.Mutex
var hoarderTagAfterInsertHooks []HoarderTagHook

var hoarderTagBeforeUpdateMu sync.Mutex
var hoarderTagBeforeUpdateHooks []HoarderTagHook
var hoarderTagAfterUpdateMu sync.Mutex
var hoarderTagAfterUpdateHooks []HoarderTagHook

var hoarderTagBeforeDeleteMu sync.Mutex
var hoarderTagBeforeDeleteHooks []HoarderTagHook
var hoarderTagAfterDeleteMu sync.Mutex
var hoarderTagAfterDeleteHooks []HoarderTagHook

var hoarderTagBeforeUpsertMu sync.Mutex
var hoarderTagBeforeUpsertHooks []HoarderTagHook
var hoarderTagAfterUpsertMu sync.Mutex
var hoarderTagAfterUpsertHooks []HoarderTagHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HoarderTag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hoarderTagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HoarderTag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hoarderTagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HoarderTag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hoarderTagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HoarderTag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hoarderTagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HoarderTag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hoarderTagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HoarderTag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hoarderTagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HoarderTag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hoarderTagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HoarderTag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hoarderTagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HoarderTag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range hoarderTagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHoarderTagHook registers your hook function for all future operations.
func AddHoarderTagHook(hookPoint boil.HookPoint, hoarderTagHook HoarderTagHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		hoarderTagAfterSelectMu.Lock()
		hoarderTagAfterSelectHooks = append(hoarderTagAfterSelectHooks, hoarderTagHook)
		hoarderTagAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		hoarderTagBeforeInsertMu.Lock()
		hoarderTagBeforeInsertHooks = append(hoarderTagBeforeInsertHooks, hoarderTagHook)
		hoarderTagBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		hoarderTagAfterInsertMu.Lock()
		hoarderTagAfterInsertHooks = append(hoarderTagAfterInsertHooks, hoarderTagHook)
		hoarderTagAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		hoarderTagBeforeUpdateMu.Lock()
		hoarderTagBeforeUpdateHooks = append(hoarderTagBeforeUpdateHooks, hoarderTagHook)
		hoarderTagBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		hoarderTagAfterUpdateMu.Lock()
		hoarderTagAfterUpdateHooks = append(hoarderTagAfterUpdateHooks, hoarderTagHook)
		hoarderTagAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		hoarderTagBeforeDeleteMu.Lock()
		hoarderTagBeforeDeleteHooks = append(hoarderTagBeforeDeleteHooks, hoarderTagHook)
		hoarderTagBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		hoarderTagAfterDeleteMu.Lock()
		hoarderTagAfterDeleteHooks = append(hoarderTagAfterDeleteHooks, hoarderTagHook)
		hoarderTagAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		hoarderTagBeforeUpsertMu.Lock()
		hoarderTagBeforeUpsertHooks = append(hoarderTagBeforeUpsertHooks, hoarderTagHook)
		hoarderTagBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		hoarderTagAfterUpsertMu.Lock()
		hoarderTagAfterUpsertHooks = append(hoarderTagAfterUpsertHooks, hoarderTagHook)
		hoarderTagAfterUpsertMu.Unlock()
	}
}

// One returns a single hoarderTag record from the query.
func (q hoarderTagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HoarderTag, error) {
	o := &HoarderTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for hoarder_tag")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HoarderTag records from the query.
func (q hoarderTagQuery) All(ctx context.Context, exec boil.ContextExecutor) (HoarderTagSlice, error) {
	var o []*HoarderTag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to HoarderTag slice")
	}

	if len(hoarderTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HoarderTag records in the query.
func (q hoarderTagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count hoarder_tag rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q hoarderTagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if hoarder_tag exists")
	}

	return count > 0, nil
}

// Hoarder pointed to by the foreign key.
func (o *HoarderTag) Hoarder(mods ...qm.QueryMod) userBookStatusQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HoarderID),
	}

	queryMods = append(queryMods, mods...)

	return UserBookStatuses(queryMods...)
}

// Tag pointed to by the foreign key.
func (o *HoarderTag) Tag(mods ...qm.QueryMod) tagQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TagID),
	}

	queryMods = append(queryMods, mods...)

	return Tags(queryMods...)
}

// LoadHoarder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hoarderTagL) LoadHoarder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHoarderTag interface{}, mods queries.Applicator) error {
	var slice []*HoarderTag
	var object *HoarderTag

	if singular {
		var ok bool
		object, ok = maybeHoarderTag.(*HoarderTag)
		if !ok {
			object = new(HoarderTag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHoarderTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHoarderTag))
			}
		}
	} else {
		s, ok := maybeHoarderTag.(*[]*HoarderTag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHoarderTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHoarderTag))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &hoarderTagR{}
		}
		args[object.HoarderID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hoarderTagR{}
			}

			args[obj.HoarderID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_book_status`),
		qm.WhereIn(`user_book_status.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserBookStatus")
	}

	var resultSlice []*UserBookStatus
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserBookStatus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_book_status")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_book_status")
	}

	if len(userBookStatusAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Hoarder = foreign
		if foreign.R == nil {
			foreign.R = &userBookStatusR{}
		}
		foreign.R.HoarderHoarderTags = append(foreign.R.HoarderHoarderTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HoarderID == foreign.ID {
				local.R.Hoarder = foreign
				if foreign.R == nil {
					foreign.R = &userBookStatusR{}
				}
				foreign.R.HoarderHoarderTags = append(foreign.R.HoarderHoarderTags, local)
				break
			}
		}
	}

	return nil
}

// LoadTag allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (hoarderTagL) LoadTag(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHoarderTag interface{}, mods queries.Applicator) error {
	var slice []*HoarderTag
	var object *HoarderTag

	if singular {
		var ok bool
		object, ok = maybeHoarderTag.(*HoarderTag)
		if !ok {
			object = new(HoarderTag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHoarderTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHoarderTag))
			}
		}
	} else {
		s, ok := maybeHoarderTag.(*[]*HoarderTag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHoarderTag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHoarderTag))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &hoarderTagR{}
		}
		args[object.TagID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &hoarderTagR{}
			}

			args[obj.TagID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tags`),
		qm.WhereIn(`tags.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tag")
	}

	var resultSlice []*Tag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tags")
	}

	if len(tagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tag = foreign
		if foreign.R == nil {
			foreign.R = &tagR{}
		}
		foreign.R.HoarderTags = append(foreign.R.HoarderTags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TagID == foreign.ID {
				local.R.Tag = foreign
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.HoarderTags = append(foreign.R.HoarderTags, local)
				break
			}
		}
	}

	return nil
}

// SetHoarder of the hoarderTag to the related item.
// Sets o.R.Hoarder to related.
// Adds o to related.R.HoarderHoarderTags.
func (o *HoarderTag) SetHoarder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserBookStatus) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hoarder_tag\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hoarder_id"}),
		strmangle.WhereClause("\"", "\"", 2, hoarderTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HoarderID = related.ID
	if o.R == nil {
		o.R = &hoarderTagR{
			Hoarder: related,
		}
	} else {
		o.R.Hoarder = related
	}

	if related.R == nil {
		related.R = &userBookStatusR{
			HoarderHoarderTags: HoarderTagSlice{o},
		}
	} else {
		related.R.HoarderHoarderTags = append(related.R.HoarderHoarderTags, o)
	}

	return nil
}

// SetTag of the hoarderTag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.HoarderTags.
func (o *HoarderTag) SetTag(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tag) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hoarder_tag\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tag_id"}),
		strmangle.WhereClause("\"", "\"", 2, hoarderTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TagID = related.ID
	if o.R == nil {
		o.R = &hoarderTagR{
			Tag: related,
		}
	} else {
		o.R.Tag = related
	}

	if related.R == nil {
		related.R = &tagR{
			HoarderTags: HoarderTagSlice{o},
		}
	} else {
		related.R.HoarderTags = append(related.R.HoarderTags, o)
	}

	return nil
}

// HoarderTags retrieves all the records using an executor.
func HoarderTags(mods ...qm.QueryMod) hoarderTagQuery {
	mods = append(mods, qm.From("\"hoarder_tag\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"hoarder_tag\".*"})
	}

	return hoarderTagQuery{q}
}

// FindHoarderTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHoarderTag(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*HoarderTag, error) {
	hoarderTagObj := &HoarderTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"hoarder_tag\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, hoarderTagObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from hoarder_tag")
	}

	if err = hoarderTagObj.doAfterSelectHooks(ctx, exec); err != nil {
		return hoarderTagObj, err
	}

	return hoarderTagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HoarderTag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hoarder_tag provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hoarderTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	hoarderTagInsertCacheMut.RLock()
	cache, cached := hoarderTagInsertCache[key]
	hoarderTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			hoarderTagAllColumns,
			hoarderTagColumnsWithDefault,
			hoarderTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(hoarderTagType, hoarderTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(hoarderTagType, hoarderTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"hoarder_tag\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"hoarder_tag\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into hoarder_tag")
	}

	if !cached {
		hoarderTagInsertCacheMut.Lock()
		hoarderTagInsertCache[key] = cache
		hoarderTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HoarderTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HoarderTag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	hoarderTagUpdateCacheMut.RLock()
	cache, cached := hoarderTagUpdateCache[key]
	hoarderTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			hoarderTagAllColumns,
			hoarderTagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update hoarder_tag, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"hoarder_tag\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, hoarderTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(hoarderTagType, hoarderTagMapping, append(wl, hoarderTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update hoarder_tag row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for hoarder_tag")
	}

	if !cached {
		hoarderTagUpdateCacheMut.Lock()
		hoarderTagUpdateCache[key] = cache
		hoarderTagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q hoarderTagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for hoarder_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for hoarder_tag")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HoarderTagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hoarderTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"hoarder_tag\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, hoarderTagPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in hoarderTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all hoarderTag")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HoarderTag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no hoarder_tag provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(hoarderTagColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	hoarderTagUpsertCacheMut.RLock()
	cache, cached := hoarderTagUpsertCache[key]
	hoarderTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			hoarderTagAllColumns,
			hoarderTagColumnsWithDefault,
			hoarderTagColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			hoarderTagAllColumns,
			hoarderTagPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert hoarder_tag, could not build update column list")
		}

		ret := strmangle.SetComplement(hoarderTagAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(hoarderTagPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert hoarder_tag, could not build conflict column list")
			}

			conflict = make([]string, len(hoarderTagPrimaryKeyColumns))
			copy(conflict, hoarderTagPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"hoarder_tag\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(hoarderTagType, hoarderTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(hoarderTagType, hoarderTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert hoarder_tag")
	}

	if !cached {
		hoarderTagUpsertCacheMut.Lock()
		hoarderTagUpsertCache[key] = cache
		hoarderTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HoarderTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HoarderTag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no HoarderTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), hoarderTagPrimaryKeyMapping)
	sql := "DELETE FROM \"hoarder_tag\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from hoarder_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for hoarder_tag")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q hoarderTagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no hoarderTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hoarder_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hoarder_tag")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HoarderTagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(hoarderTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hoarderTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"hoarder_tag\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hoarderTagPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hoarderTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hoarder_tag")
	}

	if len(hoarderTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HoarderTag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHoarderTag(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HoarderTagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HoarderTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), hoarderTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"hoarder_tag\".* FROM \"hoarder_tag\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, hoarderTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HoarderTagSlice")
	}

	*o = slice

	return nil
}

// HoarderTagExists checks if the HoarderTag row exists.
func HoarderTagExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"hoarder_tag\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if hoarder_tag exists")
	}

	return exists, nil
}

// Exists checks if the HoarderTag row exists.
func (o *HoarderTag) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return HoarderTagExists(ctx, exec, o.ID)
}
